//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\zhout\RiderProjects\myprolang\AntlrCSharp\Content\Sample.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrCSharp.Content {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class SampleParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, WHILE=29, INTEGER=30, FLOAT=31, 
		STRING=32, BOOL=33, NULL=34, COMMENT=35, WS=36, IDENTIFIER=37;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_statement = 2, RULE_forBlock = 3, 
		RULE_switchBlock = 4, RULE_switchCase = 5, RULE_ifBlock = 6, RULE_elseIfBlock = 7, 
		RULE_whileBlock = 8, RULE_assignment = 9, RULE_functionCall = 10, RULE_functionDefinition = 11, 
		RULE_parameterList = 12, RULE_expression = 13, RULE_multOP = 14, RULE_addOP = 15, 
		RULE_compareOP = 16, RULE_boolOP = 17, RULE_constant = 18, RULE_block = 19;
	public static readonly string[] ruleNames = {
		"program", "line", "statement", "forBlock", "switchBlock", "switchCase", 
		"ifBlock", "elseIfBlock", "whileBlock", "assignment", "functionCall", 
		"functionDefinition", "parameterList", "expression", "multOP", "addOP", 
		"compareOP", "boolOP", "constant", "block"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'for'", "'('", "')'", "'switch'", "'{'", "'default'", "':'", 
		"'}'", "'case'", "'if'", "'else'", "'='", "','", "'function'", "'!'", 
		"'*'", "'/'", "'+'", "'-'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", 
		"'and'", "'or'", null, null, null, null, null, "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "WHILE", "INTEGER", "FLOAT", "STRING", "BOOL", 
		"NULL", "COMMENT", "WS", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sample.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SampleParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(SampleParser.Eof, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__4) | (1L << T__10) | (1L << WHILE) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 40; line();
				}
				}
				State = 45;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 46; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public WhileBlockContext whileBlock() {
			return GetRuleContext<WhileBlockContext>(0);
		}
		public ForBlockContext forBlock() {
			return GetRuleContext<ForBlockContext>(0);
		}
		public SwitchBlockContext switchBlock() {
			return GetRuleContext<SwitchBlockContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 53;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48; statement();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49; ifBlock();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 50; whileBlock();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 4);
				{
				State = 51; forBlock();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 5);
				{
				State = 52; switchBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 55; assignment();
				}
				break;

			case 2:
				{
				State = 56; functionCall();
				}
				break;
			}
			State = 59; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForBlockContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterForBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitForBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForBlockContext forBlock() {
		ForBlockContext _localctx = new ForBlockContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_forBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(T__1);
			State = 62; Match(T__2);
			State = 64;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 63; assignment();
				}
			}

			State = 66; Match(T__0);
			State = 68;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__15) | (1L << INTEGER) | (1L << FLOAT) | (1L << STRING) | (1L << BOOL) | (1L << NULL) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 67; expression(0);
				}
			}

			State = 70; Match(T__0);
			State = 72;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 71; assignment();
				}
			}

			State = 74; Match(T__3);
			State = 75; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SwitchCaseContext[] switchCase() {
			return GetRuleContexts<SwitchCaseContext>();
		}
		public SwitchCaseContext switchCase(int i) {
			return GetRuleContext<SwitchCaseContext>(i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_switchBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(T__4);
			State = 78; expression(0);
			State = 79; Match(T__5);
			State = 83;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__9) {
				{
				{
				State = 80; switchCase();
				}
				}
				State = 85;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 89;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__6) {
				{
				State = 86; Match(T__6);
				State = 87; Match(T__7);
				State = 88; block();
				}
			}

			State = 91; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SwitchCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCase; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterSwitchCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitSwitchCase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseContext switchCase() {
		SwitchCaseContext _localctx = new SwitchCaseContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_switchCase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(T__9);
			State = 94; expression(0);
			State = 95; Match(T__7);
			State = 96; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseIfBlockContext elseIfBlock() {
			return GetRuleContext<ElseIfBlockContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_ifBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(T__10);
			State = 99; expression(0);
			State = 100; block();
			State = 103;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__11) {
				{
				State = 101; Match(T__11);
				State = 102; elseIfBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterElseIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitElseIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_elseIfBlock);
		try {
			State = 107;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__5:
				EnterOuterAlt(_localctx, 1);
				{
				State = 105; block();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 2);
				{
				State = 106; ifBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileBlockContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(SampleParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseIfBlockContext elseIfBlock() {
			return GetRuleContext<ElseIfBlockContext>(0);
		}
		public WhileBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterWhileBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitWhileBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileBlockContext whileBlock() {
		WhileBlockContext _localctx = new WhileBlockContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_whileBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; Match(WHILE);
			State = 110; expression(0);
			State = 111; block();
			{
			State = 112; Match(T__11);
			State = 113; elseIfBlock();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SampleParser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(IDENTIFIER);
			State = 116; Match(T__12);
			State = 117; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SampleParser.IDENTIFIER, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; Match(IDENTIFIER);
			State = 120; Match(T__2);
			State = 129;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__15) | (1L << INTEGER) | (1L << FLOAT) | (1L << STRING) | (1L << BOOL) | (1L << NULL) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 121; expression(0);
				State = 126;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__13) {
					{
					{
					State = 122; Match(T__13);
					State = 123; expression(0);
					}
					}
					State = 128;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 131; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SampleParser.IDENTIFIER, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(T__14);
			State = 134; Match(IDENTIFIER);
			State = 135; Match(T__2);
			State = 137;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 136; parameterList();
				}
			}

			State = 139; Match(T__3);
			State = 140; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(SampleParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SampleParser.IDENTIFIER, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(IDENTIFIER);
			State = 147;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__13) {
				{
				{
				State = 143; Match(T__13);
				State = 144; Match(IDENTIFIER);
				}
				}
				State = 149;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SampleParser.IDENTIFIER, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultOPContext multOP() {
			return GetRuleContext<MultOPContext>(0);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AddOPContext addOP() {
			return GetRuleContext<AddOPContext>(0);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CompareOPContext compareOP() {
			return GetRuleContext<CompareOPContext>(0);
		}
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterComparisonExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitComparisonExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BoolOPContext boolOP() {
			return GetRuleContext<BoolOPContext>(0);
		}
		public BooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterBooleanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitBooleanExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 151; constant();
				}
				break;

			case 2:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 152; Match(IDENTIFIER);
				}
				break;

			case 3:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 153; functionCall();
				}
				break;

			case 4:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 154; Match(T__2);
				State = 155; expression(0);
				State = 156; Match(T__3);
				}
				break;

			case 5:
				{
				_localctx = new NotExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 158; Match(T__15);
				State = 159; expression(5);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 180;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 178;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 162;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 163; multOP();
						State = 164; expression(5);
						}
						break;

					case 2:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 166;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 167; addOP();
						State = 168; expression(4);
						}
						break;

					case 3:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 170;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 171; compareOP();
						State = 172; expression(3);
						}
						break;

					case 4:
						{
						_localctx = new BooleanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 174;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 175; boolOP();
						State = 176; expression(2);
						}
						break;
					}
					} 
				}
				State = 182;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultOPContext : ParserRuleContext {
		public MultOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOP; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterMultOP(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitMultOP(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOPContext multOP() {
		MultOPContext _localctx = new MultOPContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_multOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			_la = _input.La(1);
			if ( !(_la==T__16 || _la==T__17) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOPContext : ParserRuleContext {
		public AddOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOP; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterAddOP(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitAddOP(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOPContext addOP() {
		AddOPContext _localctx = new AddOPContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_addOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			_la = _input.La(1);
			if ( !(_la==T__18 || _la==T__19) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOPContext : ParserRuleContext {
		public CompareOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOP; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterCompareOP(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitCompareOP(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOPContext compareOP() {
		CompareOPContext _localctx = new CompareOPContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_compareOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOPContext : ParserRuleContext {
		public BoolOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOP; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterBoolOP(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitBoolOP(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolOPContext boolOP() {
		BoolOPContext _localctx = new BoolOPContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_boolOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			_la = _input.La(1);
			if ( !(_la==T__26 || _la==T__27) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(SampleParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(SampleParser.FLOAT, 0); }
		public ITerminalNode STRING() { return GetToken(SampleParser.STRING, 0); }
		public ITerminalNode BOOL() { return GetToken(SampleParser.BOOL, 0); }
		public ITerminalNode NULL() { return GetToken(SampleParser.NULL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << STRING) | (1L << BOOL) | (1L << NULL))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISampleListener typedListener = listener as ISampleListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISampleVisitor<TResult> typedVisitor = visitor as ISampleVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(T__5);
			State = 197;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__4) | (1L << T__10) | (1L << WHILE) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 194; line();
				}
				}
				State = 199;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 200; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 4);

		case 1: return Precpred(_ctx, 3);

		case 2: return Precpred(_ctx, 2);

		case 3: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\'\xCD\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x3\x2\a\x2,\n\x2\f\x2\xE\x2/\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x5\x3\x38\n\x3\x3\x4\x3\x4\x5\x4<\n\x4\x3\x4\x3\x4\x3\x5\x3\x5"+
		"\x3\x5\x5\x5\x43\n\x5\x3\x5\x3\x5\x5\x5G\n\x5\x3\x5\x3\x5\x5\x5K\n\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\a\x6T\n\x6\f\x6\xE\x6W\v\x6"+
		"\x3\x6\x3\x6\x3\x6\x5\x6\\\n\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x5\bj\n\b\x3\t\x3\t\x5\tn\n\t\x3\n\x3\n\x3\n\x3"+
		"\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\a\f\x7F\n\f"+
		"\f\f\xE\f\x82\v\f\x5\f\x84\n\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x5\r\x8C"+
		"\n\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\a\xE\x94\n\xE\f\xE\xE\xE\x97\v\xE"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xA3"+
		"\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\xB5\n\xF\f\xF\xE\xF\xB8\v\xF\x3\x10"+
		"\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15"+
		"\x3\x15\a\x15\xC6\n\x15\f\x15\xE\x15\xC9\v\x15\x3\x15\x3\x15\x3\x15\x2"+
		"\x2\x3\x1C\x16\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14"+
		"\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2\x2\a\x3\x2"+
		"\x13\x14\x3\x2\x15\x16\x3\x2\x17\x1C\x3\x2\x1D\x1E\x3\x2 $\xD2\x2-\x3"+
		"\x2\x2\x2\x4\x37\x3\x2\x2\x2\x6;\x3\x2\x2\x2\b?\x3\x2\x2\x2\nO\x3\x2\x2"+
		"\x2\f_\x3\x2\x2\x2\xE\x64\x3\x2\x2\x2\x10m\x3\x2\x2\x2\x12o\x3\x2\x2\x2"+
		"\x14u\x3\x2\x2\x2\x16y\x3\x2\x2\x2\x18\x87\x3\x2\x2\x2\x1A\x90\x3\x2\x2"+
		"\x2\x1C\xA2\x3\x2\x2\x2\x1E\xB9\x3\x2\x2\x2 \xBB\x3\x2\x2\x2\"\xBD\x3"+
		"\x2\x2\x2$\xBF\x3\x2\x2\x2&\xC1\x3\x2\x2\x2(\xC3\x3\x2\x2\x2*,\x5\x4\x3"+
		"\x2+*\x3\x2\x2\x2,/\x3\x2\x2\x2-+\x3\x2\x2\x2-.\x3\x2\x2\x2.\x30\x3\x2"+
		"\x2\x2/-\x3\x2\x2\x2\x30\x31\a\x2\x2\x3\x31\x3\x3\x2\x2\x2\x32\x38\x5"+
		"\x6\x4\x2\x33\x38\x5\xE\b\x2\x34\x38\x5\x12\n\x2\x35\x38\x5\b\x5\x2\x36"+
		"\x38\x5\n\x6\x2\x37\x32\x3\x2\x2\x2\x37\x33\x3\x2\x2\x2\x37\x34\x3\x2"+
		"\x2\x2\x37\x35\x3\x2\x2\x2\x37\x36\x3\x2\x2\x2\x38\x5\x3\x2\x2\x2\x39"+
		"<\x5\x14\v\x2:<\x5\x16\f\x2;\x39\x3\x2\x2\x2;:\x3\x2\x2\x2<=\x3\x2\x2"+
		"\x2=>\a\x3\x2\x2>\a\x3\x2\x2\x2?@\a\x4\x2\x2@\x42\a\x5\x2\x2\x41\x43\x5"+
		"\x14\v\x2\x42\x41\x3\x2\x2\x2\x42\x43\x3\x2\x2\x2\x43\x44\x3\x2\x2\x2"+
		"\x44\x46\a\x3\x2\x2\x45G\x5\x1C\xF\x2\x46\x45\x3\x2\x2\x2\x46G\x3\x2\x2"+
		"\x2GH\x3\x2\x2\x2HJ\a\x3\x2\x2IK\x5\x14\v\x2JI\x3\x2\x2\x2JK\x3\x2\x2"+
		"\x2KL\x3\x2\x2\x2LM\a\x6\x2\x2MN\x5(\x15\x2N\t\x3\x2\x2\x2OP\a\a\x2\x2"+
		"PQ\x5\x1C\xF\x2QU\a\b\x2\x2RT\x5\f\a\x2SR\x3\x2\x2\x2TW\x3\x2\x2\x2US"+
		"\x3\x2\x2\x2UV\x3\x2\x2\x2V[\x3\x2\x2\x2WU\x3\x2\x2\x2XY\a\t\x2\x2YZ\a"+
		"\n\x2\x2Z\\\x5(\x15\x2[X\x3\x2\x2\x2[\\\x3\x2\x2\x2\\]\x3\x2\x2\x2]^\a"+
		"\v\x2\x2^\v\x3\x2\x2\x2_`\a\f\x2\x2`\x61\x5\x1C\xF\x2\x61\x62\a\n\x2\x2"+
		"\x62\x63\x5(\x15\x2\x63\r\x3\x2\x2\x2\x64\x65\a\r\x2\x2\x65\x66\x5\x1C"+
		"\xF\x2\x66i\x5(\x15\x2gh\a\xE\x2\x2hj\x5\x10\t\x2ig\x3\x2\x2\x2ij\x3\x2"+
		"\x2\x2j\xF\x3\x2\x2\x2kn\x5(\x15\x2ln\x5\xE\b\x2mk\x3\x2\x2\x2ml\x3\x2"+
		"\x2\x2n\x11\x3\x2\x2\x2op\a\x1F\x2\x2pq\x5\x1C\xF\x2qr\x5(\x15\x2rs\a"+
		"\xE\x2\x2st\x5\x10\t\x2t\x13\x3\x2\x2\x2uv\a\'\x2\x2vw\a\xF\x2\x2wx\x5"+
		"\x1C\xF\x2x\x15\x3\x2\x2\x2yz\a\'\x2\x2z\x83\a\x5\x2\x2{\x80\x5\x1C\xF"+
		"\x2|}\a\x10\x2\x2}\x7F\x5\x1C\xF\x2~|\x3\x2\x2\x2\x7F\x82\x3\x2\x2\x2"+
		"\x80~\x3\x2\x2\x2\x80\x81\x3\x2\x2\x2\x81\x84\x3\x2\x2\x2\x82\x80\x3\x2"+
		"\x2\x2\x83{\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x85\x3\x2\x2\x2\x85\x86"+
		"\a\x6\x2\x2\x86\x17\x3\x2\x2\x2\x87\x88\a\x11\x2\x2\x88\x89\a\'\x2\x2"+
		"\x89\x8B\a\x5\x2\x2\x8A\x8C\x5\x1A\xE\x2\x8B\x8A\x3\x2\x2\x2\x8B\x8C\x3"+
		"\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D\x8E\a\x6\x2\x2\x8E\x8F\x5(\x15\x2\x8F"+
		"\x19\x3\x2\x2\x2\x90\x95\a\'\x2\x2\x91\x92\a\x10\x2\x2\x92\x94\a\'\x2"+
		"\x2\x93\x91\x3\x2\x2\x2\x94\x97\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2\x95\x96"+
		"\x3\x2\x2\x2\x96\x1B\x3\x2\x2\x2\x97\x95\x3\x2\x2\x2\x98\x99\b\xF\x1\x2"+
		"\x99\xA3\x5&\x14\x2\x9A\xA3\a\'\x2\x2\x9B\xA3\x5\x16\f\x2\x9C\x9D\a\x5"+
		"\x2\x2\x9D\x9E\x5\x1C\xF\x2\x9E\x9F\a\x6\x2\x2\x9F\xA3\x3\x2\x2\x2\xA0"+
		"\xA1\a\x12\x2\x2\xA1\xA3\x5\x1C\xF\a\xA2\x98\x3\x2\x2\x2\xA2\x9A\x3\x2"+
		"\x2\x2\xA2\x9B\x3\x2\x2\x2\xA2\x9C\x3\x2\x2\x2\xA2\xA0\x3\x2\x2\x2\xA3"+
		"\xB6\x3\x2\x2\x2\xA4\xA5\f\x6\x2\x2\xA5\xA6\x5\x1E\x10\x2\xA6\xA7\x5\x1C"+
		"\xF\a\xA7\xB5\x3\x2\x2\x2\xA8\xA9\f\x5\x2\x2\xA9\xAA\x5 \x11\x2\xAA\xAB"+
		"\x5\x1C\xF\x6\xAB\xB5\x3\x2\x2\x2\xAC\xAD\f\x4\x2\x2\xAD\xAE\x5\"\x12"+
		"\x2\xAE\xAF\x5\x1C\xF\x5\xAF\xB5\x3\x2\x2\x2\xB0\xB1\f\x3\x2\x2\xB1\xB2"+
		"\x5$\x13\x2\xB2\xB3\x5\x1C\xF\x4\xB3\xB5\x3\x2\x2\x2\xB4\xA4\x3\x2\x2"+
		"\x2\xB4\xA8\x3\x2\x2\x2\xB4\xAC\x3\x2\x2\x2\xB4\xB0\x3\x2\x2\x2\xB5\xB8"+
		"\x3\x2\x2\x2\xB6\xB4\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\x1D\x3\x2\x2"+
		"\x2\xB8\xB6\x3\x2\x2\x2\xB9\xBA\t\x2\x2\x2\xBA\x1F\x3\x2\x2\x2\xBB\xBC"+
		"\t\x3\x2\x2\xBC!\x3\x2\x2\x2\xBD\xBE\t\x4\x2\x2\xBE#\x3\x2\x2\x2\xBF\xC0"+
		"\t\x5\x2\x2\xC0%\x3\x2\x2\x2\xC1\xC2\t\x6\x2\x2\xC2\'\x3\x2\x2\x2\xC3"+
		"\xC7\a\b\x2\x2\xC4\xC6\x5\x4\x3\x2\xC5\xC4\x3\x2\x2\x2\xC6\xC9\x3\x2\x2"+
		"\x2\xC7\xC5\x3\x2\x2\x2\xC7\xC8\x3\x2\x2\x2\xC8\xCA\x3\x2\x2\x2\xC9\xC7"+
		"\x3\x2\x2\x2\xCA\xCB\a\v\x2\x2\xCB)\x3\x2\x2\x2\x14-\x37;\x42\x46JU[i"+
		"m\x80\x83\x8B\x95\xA2\xB4\xB6\xC7";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AntlrCSharp.Content
